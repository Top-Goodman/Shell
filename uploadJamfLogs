#!/bin/bash

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Copyright (c) 2020 Jamf?  All rights reserved?
#
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are met:
#               * Redistributions of source code must retain the above copyright
#                 notice, this list of conditions and the following disclaimer.
#               * Redistributions in binary form must reproduce the above copyright
#                 notice, this list of conditions and the following disclaimer in the
#                 documentation and/or other materials provided with the distribution.
#               * Neither the name of the Jamf nor the names of its contributors may be
#                 used to endorse or promote products derived from this software without
#                 specific prior written permission.
#
#       THIS SOFTWARE IS PROVIDED BY JAMF SOFTWARE, LLC "AS IS" AND ANY
#       EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#       WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#       DISCLAIMED. IN NO EVENT SHALL JAMF SOFTWARE, LLC BE LIABLE FOR ANY
#       DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#       (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#       LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#       ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# This script was designed to be used in a Self Service policy to allow the facilitation
# or log collection by the end-user and upload the logs to the device record in Jamf Pro
# as an attachment.
#
# REQUIREMENTS:
#           - Jamf Pro
#           - macOS Clients running version 10.13 or later
#
# API Roles: (I might have given it too much for mine, yet this is what ended up working for me
#
#            API: Read API Integrations
#            Attachments: Read File Attachments, Delete File Attachments, Create File Attachments, Update File Attachments
#            Computers: Update Computers, Read Computers, Create Computers
#            Extension: Read Allowed File Extension, 
#
# For more information, visit https://github.com/kc9wwh/logCollection (I have modified this script a large amount since that, not sure how recognizable the rest is)
#
# Written by: Joshua Roskos | Jamf
# Revised by: Alton Brailovskiy | Martin Cox (Jamf) 
# Revised by: Top-Goodman (Annoying person)
#
# Revision History
# 2025-03-20: Expanded log processing funciton to handle /Users differently. DO NOT TYPE USERNAME if you want /Users/user/Library type /Users/Library. Function will check all users on computer and test each path using each found user.
# 2025-03-19: Added function to check for existing attachments, log them, and delete them. This only runs if the purge variable is set (not empty). I could probably expand this logic to only run for specific file types. Yet not doing that today...
# 2025-03-19: Added function to include timestamp in filename for upload. Added logging function and a few more variables. Rearranged script to put all functions at the top. 
# 2025-03-18: Added functions and loops to check through directories and build array lists of log, txt, and plist to upload. It seems .zip isn't supported anymore. That would have been nicer...
# 2024-08-2024: Updated Token Invalidation + Retry Logic
# 2024-07-23: Updated Script
# 2023-11-30: Added support for bearer auth and invalidating bearer token once done.
# 2020-12-01: Added support for macOS Big Sur
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
version="v1.3"

## User Variables
## Ensure not to include the / at the end of the JamfProURL parameter. ex https://instance.jamfcloud.com is the parameter NOT https://instance.jamfcloud.com/
## Suggested Logs to pull: /private/var/log/install.log* /private/var/log/jamf.log* /private/var/log/system.log*
## Do not set this to run at check in. Should use this by targetting the computer, or setting this run once and flush them from log when needing to rerun. Delete logs from Jamf inventory\database when done downloading or viewing.
## Replace <values> in variables below.

jamfProURL="${4}" #"https://<instance>.jamfcloud.com"
jamfProUser="${5}" #"<client_id>"
jamfProPassEnc="${6}" #"<encoded_client_secret>" # see for more inforamtion https://github.com/kc9wwh/logCollection/wiki/Using-Encrypted-Strings
# Comma Seperated list of paths to check. Wild card will be searched through (not recursivly) via function below (don't even know if that fully works as intended), /Users do not put a username here function will take care of this with loop
logFiles="${7}" #"/private/var/log/install.log*,/private/var/log/jamf.log*,/private/var/log/system.log*,/Library/Managed Preferences/com.jamf.*,/Users/Library/Preferences/com.jamf*" 
salt="${8}" #"<salt>" # see for more inforamtion https://github.com/kc9wwh/logCollection/wiki/Using-Encrypted-Strings
key="${9}" #"<passkey>" # see for more inforamtion https://github.com/kc9wwh/logCollection/wiki/Using-Encrypted-Strings
purge="${10}" #Leave null to leave all attachments in inventory. Anything here will erase ALL prior existing attachments for comptuer running this script.
log_file="/private/var/log/uploadLogsAPI.log"

## System Variables
serial_number=$(system_profiler SPHardwareDataType | grep 'Serial Number' | awk '{print $NF}')
currentUser=$( stat -f%Su /dev/console )
compHostName=$( scutil --get LocalHostName )
timeStamp=$( date '+%Y-%m-%d-%H-%M-%S' )
osMajor=$(/usr/bin/sw_vers -productVersion | awk -F . '{print $1}')
osMinor=$(/usr/bin/sw_vers -productVersion | awk -F . '{print $2}')
jamfProPass=$(echo "${jamfProPassEnc}" |/usr/bin/openssl enc -aes256 -d -a -A -S "${salt}" -k "${key}")
jamfProURL="${jamfProURL%/}"
if [[ $jamfProURL != *://* ]]; then jamfProURL="https://$jamfProURL"; fi

# Logging function with timestamp
log() {
    local message="$1"
    local timestamp=$(date +"%Y-%m-%dT%H:%M:%S%z")
    echo "[$timestamp] $message" >> "$log_file"
    echo "[$timestamp] $message"
}

# Function to retrieve access token for Jamf API
get_access_token() {
  curl --request POST \
    --url "$jamfProURL/api/oauth/token" \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode "client_id=$jamfProUser" \
    --data-urlencode 'grant_type=client_credentials' \
    --data-urlencode "client_secret=$jamfProPass" | jq -r '.access_token'
}

# Function to delete ALL existing attachments for target computer
delete_ALL_attachments() {
    local jamfProURL="$1"
    local computerID="$2"
    local accessToken="$3"

    # Get the list of filenames for all attachments for a specific computer ID
    local attachmentFilenames=$(curl -X GET "$jamfProURL:443/JSSResource/computers/id/$computerID" -H "Authorization: Bearer ${accessToken}" | xmllint -format - | xpath -e '/computer/purchasing/attachments' | grep "<filename>")
    local filename_array=($(echo "$attachmentFilenames" | sed -e 's/<filename>//' -e 's/<\/filename>//'))

    # Get the list of IDs for all attachments for a specific computer ID
    local attachmentIDs=$(curl -X GET "$jamfProURL:443/JSSResource/computers/id/$computerID" -H "Authorization: Bearer ${accessToken}" | xmllint -format - | xpath -e '/computer/purchasing/attachments' | grep "<id>")
    local id_array=($(echo "$attachmentIDs" | grep -oE '[0-9]+'))

    for i in "${!id_array[@]}"; do
        echo "Deleting File: ${filename_array[$i]} - ID: ${id_array[$i]}"
        curl -X DELETE "$jamfProURL:443/api/v1/computers-inventory/$computerID/attachments/${id_array[$i]}" \
            -H "Authorization: Bearer ${accessToken}"
    done
}

# Function to process logFiles and add paths to logArray
process_log_files() {
    local logArrayName=$1
    local logFiles=$2

    # Convert comma-separated list into an array
    IFS=',' read -r -a paths <<< "$logFiles"

    for logFile in "${paths[@]}"; do
        if [[ $logFile == /Users/* ]]; then
            # If the logFile is in the /Users directory, check all user folders
            basePath="/Users"
            userFolders=($(ls -d $basePath/*/))
            for userFolder in "${userFolders[@]}"; do
                fullPath="${userFolder}${logFile#*/Users/*}"
                if [[ $fullPath == *\** ]]; then
                    # If the fullPath contains a wildcard, use globbing to find matching files
                    log "Evaluating \"$fullPath\""
                    for evalFile in $(find "${fullPath%/*}" -name "${fullPath##*/}"); do
                        log "adding $evalFile to log array"
                        eval "$logArrayName+=('$evalFile')"
                    done
                elif [[ -e $fullPath ]]; then
                    log "adding $fullPath to log array"
                    eval "$logArrayName+=('$fullPath')"
                else
                    log "File $fullPath does not exist"
                fi
            done
        elif [[ $logFile == *\** ]]; then
            # If the logFile contains a wildcard, use globbing to find matching files
            log "Evaluating \"$logFile\""
            for evalFile in $(find "${logFile%/*}" -name "${logFile##*/}"); do
                log "adding $evalFile to log array"
                eval "$logArrayName+=('$evalFile')"
            done
        else
            # If no wildcard and not in /Users, add the full path to logArray
            log "adding $logFile to log array"
            eval "$logArrayName+=('$logFile')"
        fi
    done
}

# Function to rename the file by adding a timestamp before the last dot
upload_file_with_timestamp() {
    local filePath="$1"
    local timestamp=$(date +"%Y-%m-%dT%H.%M.%S%z")

    # Extract the directory, filename without extension, and extension
    local dir="${filePath%/*}"
    local base="${filePath##*/}"
    local name="${base%.*}"
    local ext="${base##*.}"
    
    # Construct the new filename
    local newFilePath="${dir}/${name}_${timestamp}.${ext}"
    
    # Rename the file
    cp "$filePath" "$newFilePath"
    
    log "Renaming $filePath to $newFilePath"
log "Uploading $newFilePath to $jamfProURL - Computer $computerID"
curl -X POST "$jamfProURL:443/JSSResource/fileuploads/computers/id/$computerID" -H "Authorization: Bearer ${accessToken}" -F name=@"$newFilePath"
sleep 1
rm "$newFilePath"
}

# Log the script start
log "Script started. Version:$version"
log "Serial Number: $serial_number"
log "Operating System: $osMajor.$osMinor" 

log "Retrieving Access Token from $jamfProURL as $jamfProUser"
accessToken=$(get_access_token)

# Get the computer ID using the serial number
computer_id_response=$(curl --silent --request GET "${jamfProURL}/JSSResource/computers/serialnumber/${serial_number}" \
--header "Authorization: Bearer ${accessToken}" \
--header "Accept: application/json")

# Print the response for debugging
#log "Computer ID Response: $computer_id_response"

computerID=$(echo $computer_id_response | jq -r '.computer.general.id')
log "Computer ID: $computerID"

if [[ -n "$purge" ]];then
     delete_ALL_attachments "$jamfProURL" "$computerID" "$accessToken"
fi

# Initialize the logArray variable
logArray=()

log "Processing provided paths"
process_log_files logArray "$logFiles"
log "Processing complete!"

# Print the contents of logArray
#log "Files processed ${logArray[@]}"

# Upload file(s) to computer attachments
for file in "${logArray[@]}"; do
     if [[ $file == *.log || $file == *.txt || $file == *.plist ]]; then
          upload_file_with_timestamp $file
     fi
done

# Log the script end
log "Script finished. Version:$version"

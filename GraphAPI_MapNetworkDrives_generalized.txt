#!/bin/bash

# Check if the access token is provided as an argument
if [ -z "$1" ]; then
  echo "Usage: $0 <access_token>"
  exit 1
fi

ACCESS_TOKEN=$1

log_file="/private/var/log/graphDriveMapper.log"

# List of groups to check for matches
check_groups=("Group 1" "Group 2" "Admins")
# Domain Controller, used to check if VPN is connected
HOST="host.contoso.com"

# Logging function with timestamp
log() {
    local message="$1"
    local timestamp=$(date +"%Y-%m-%dT%H:%M:%S%z")
    echo "[$timestamp] $message" >> "$log_file"
    echo "[$timestamp] $message"
}

# Function to URL-encode a string
url_encode_spaces_commas() {
  local string="${1}"
  local encoded="${string// /%20}"  # Replace spaces with %20
  encoded="${encoded//,/%2C}"       # Replace commas with %2C
  echo "${encoded}"
}

# Function to map a drive
map_drive() {
    local server=$1
    local share=$2
    local user=$(stat -f "%Su" /dev/console)
    
    log "Mapping $server - $share"
    su -l "$user" -c "open -g smb://$server.kelleydrye.com/$share"
    sleep 4	
}

# Log the script start
log "Script started"

# This section for Logged in user, uid, and san is only needed if you use usernames in any paths for drive mappings, common for "Home" or "Personal" drives.
# Get Logged in user
logged_in_user=$(stat -f "%Su" /dev/console)
log "Logged in User: $logged_in_user"

# Get id associated to logged in user
uid=$(id -u "$logged_in_user")
log "UserID: $uid"

# This san (SamAccountName) section  assumes a Kerberos ticket is being registered from another location, in this instance Jamf Connect is doing so.
# Might not hurt to do error checking here, since this is also validating the kerberos ticket as expected to be seen, which is used for authentication during mappings.
# run command as logged in user to get Kerberos Ticket list on device and manipulate output and text to spit out desired SamAccountName
san=$(launchctl asuser $uid sudo -u "$logged_in_user" klist|grep 'Principal:'|awk '{print $2}'| sed 's/^[[:space:]]*//;s/[[:space:]]*$//'|cut -d'@' -f1)
log "SamAccountName: $san"

# Get Display Name
display_name=$(su -l `stat -f "%Su" /dev/console` -c "id -F")
log "Display Name: $display_name"

# Define the filter query
filter_query="\$filter=displayName eq '$display_name'"
log "Filter Query (original): $filter_query"

# URL-encode spaces and commas in the filter query
encoded_filter_query=$(url_encode_spaces_commas "$filter_query")
log "Filter Query (encoded): $encoded_filter_query"

# Define the API endpoint
api_endpoint="https://graph.microsoft.com/v1.0/users"

TIMEOUT=900  # 15 minutes in seconds
START_TIME=$(date +%s)
REACHABLE=true

# Loop until the ping command returns successfully or timeout is reached
while ! ping -c 1 $HOST &> /dev/null; do
    CURRENT_TIME=$(date +%s)
    ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
    
    if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
        log "Timeout 15 minutes reached. $HOST is not reachable."
        REACHABLE=false
        break
    fi
    
    log "Pinging $HOST..."
    sleep 10
done

if [ "$REACHABLE" = true ]; then
    log "$HOST is reachable"
    log "Took $ELAPSED_TIME seconds to establish VPN connection"
fi

# Make the API request using curl
user=$(curl -X GET "$api_endpoint?$encoded_filter_query" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json")

# Print the response
log "User: $user"

# Extract the user ID from the response
user_id=$(echo "$user" | jq -r '.value[0].id')

# Print the user ID
log "User ID: $user_id"

# Define the API endpoint to get user's groups
groups_endpoint="https://graph.microsoft.com/v1.0/users/$user_id/transitiveMemberOf"

# Make the API request to get user's groups
groups_response=$(curl -X GET "$groups_endpoint" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json")

# Extract and print the group names from the response
group_names=$(echo "$groups_response" | jq -r '.value[].displayName')

# Convert group names to an array
IFS=$'\n' read -r -d '' -a group_names_array <<< "$group_names"

# Check for matches (Can probably remove this section)
log "Check for matching groups."
for group_name in "${group_names_array[@]}"; do
  for check_group in "${check_groups[@]}"; do
    if [[ "$group_name" == "$check_group" ]]; then
      log "Matching Group found: $group_name"
    fi
  done
done


# The below assumes a Kerberos ticket already exists, and should be used for authentication. Failure to have this setup in environment will likely result in prompts to enter credentials.
# Check for matches and use a case statement to perform actions
for group_name in "${group_names_array[@]}"; do
  for check_group in "${check_groups[@]}"; do
    if [[ "$group_name" == "$check_group" ]]; then
      case "$group_name" in
        "Group 1")
          log "$display_name is a member of Group 1"
          map_drive "Sever" "Share1"
          map_drive "Server" "$san\$"
        "Group 2")
          log "$display_name is a member of Group 2"
          map_drive "Sever" "Share2"
          map_drive "Server" "$san\$"
          ;;
        "Admins")
          log "$display_name is a member of Admins"
          map_drive "Sever" "Shares"
          map_drive "Sever" "$san\$"
          map_drive "Sever" "Admin"
          ;;
      esac
    fi
  done
done
